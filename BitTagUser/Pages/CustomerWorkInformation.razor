@page "/custWorkInfo"
@using BitTagDAL
@using BitTagModels
@using BitTagUser.CutomerServices;
@inject ICustomerWorkInfo custWorkinfo
@inject IOrgs org
@inject IBitTagUsers bittaguser
<h3>CustomerWorkInfo</h3>

<EditForm Model="customerWorkInfo" OnSubmit="SaveCustWorkInfo">
    <label>Organization</label>
    @*<input type="text" @bind-value="vehicle.vehicleMake" /><br />*@
    <select @onchange="SeletedOrgID">
        @foreach (var item in organizations)
        {
            <option value="@item.orgID">@item.orgName</option>
        }
    </select>
    <label>Work Type</label>
    <input type="text" @bind-value="customerWorkInfo.WorkType" />
    <label>Designtion</label>
    <input type="text" @bind-value="customerWorkInfo.Desig" />
    <label>Work time</label>
    <input type="text" @bind-value="customerWorkInfo.worktime" />
    <button type="submit">Save</button>
</EditForm>

@code {
    CustomerWorkInfoModel customerWorkInfo = new CustomerWorkInfoModel();
    List<CustomerWorkInfoModel> workinfos = new List<CustomerWorkInfoModel>();

    List<OrganizationModel> organizations = new List<OrganizationModel>();
    Guid orgId { get; set; }

    string userid = "3fa85f64-5717-4562-b3fc-2c963f66afad";

    //generate bittag
    private BitTagUserModel bitTagUser = new BitTagUserModel();
    //string userid = "3fa85f64-5717-4562-b3fc-2c963f66afad";
    string vehid = "9F2E2662-4924-4C2B-A7B3-EA0EE31E3374";
    private async void SaveCustWorkInfo()
    {
        customerWorkInfo.userID_FK = Guid.Parse(userid);
        customerWorkInfo.org_FK = orgId;
        bitTagUser.userid_fk = Guid.Parse(userid);
        bitTagUser.vehid_fk = Guid.Parse(vehid);
        bitTagUser.bittagcode = "123456";
        await custWorkinfo.SaveCustomerWorkInfo(customerWorkInfo);
        await bittaguser.SaveBitTagUser(bitTagUser);

    }
    //private async Task LoadData()
    //{
    //    organizations = await org.Getorgs();
    //}
    private void SeletedOrgID(ChangeEventArgs e)
    {
        orgId = Guid.Parse(e.Value.ToString());
    }
    protected override async Task OnInitializedAsync()
    {

        organizations = await org.Getorgs();
    }
}
