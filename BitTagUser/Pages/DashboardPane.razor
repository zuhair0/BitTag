@page "/logged"
@using BitTagModels;
@using BitTagUser.CutomerServices;
@using BitTagUser.Authentication
@using BitTagUser.Pages
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject ICustomer cust
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IVehicle veh;
<PageTitle>Empty</PageTitle>
@foreach (var item in customersList)
{
    UserInfo.firstname = item.firstName;
    UserInfo.user = userName;
    UserInfo.custID = item.custID.ToString();
}
@foreach (var item in vehicleList)
{
    UserInfo.vehID = item.vehicleID.ToString();
}

<style>
    .alpha{
        transition: 0.1s;
    }

    .alpha:hover{
            background-color: #FF7E67;
            color: white;
    }
</style>

<div class="p-4 sm:ml-64">
    <div class="p-1 rounded-lg dark:border-gray-700">
        <div class="grid grid-cols-3 gap-4 mb-4">
            <div class="flex items-center justify-center h-40 rounded main-color alpha">
                <svg xmlns="http://www.w3.org/2000/svg" width="70" height="70" fill="white" class="bi bi-person-fill mr-3" viewBox="0 0 16 16">
                    <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6" />
                </svg>
                <div>
                    <p class="text-gray-300">WELCOME</p>
                    <h1 class="text-4xl text-gray-100 font-bold">@UserInfo.firstname</h1>
                </div>
            </div>

        </div>
 
        <div class="grid grid-cols-4 gap-4 mb-4">
            <div class="flex items-center justify-center rounded h-48 main-color alpha">
                <p align="center" class="text-2xl text-gray-400 dark:text-gray-500">
                    <svg align="center" xmlns="http://www.w3.org/2000/svg" width="100" height="100" fill="white" class="bi bi-person-circle" viewBox="0 0 16 16">
                        <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0" />
                        <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8m8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1" />
                    </svg>
                    <a href="index/@userName" class="text-2xl text-gray-100 ">Show Profile</a>
                </p>
            </div>
            <div class="flex items-center justify-center rounded h-48 main-color alpha">
                <p align="center" class="text-2xl text-gray-400 dark:text-gray-500">
                    <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" fill="white" class="bi bi-person-workspace" viewBox="0 0 16 16">
                        <path d="M4 16s-1 0-1-1 1-4 5-4 5 3 5 4-1 1-1 1zm4-5.95a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5" />
                        <path d="M2 1a2 2 0 0 0-2 2v9.5A1.5 1.5 0 0 0 1.5 14h.653a5.4 5.4 0 0 1 1.066-2H1V3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v9h-2.219c.554.654.89 1.373 1.066 2h.653a1.5 1.5 0 0 0 1.5-1.5V3a2 2 0 0 0-2-2z" />
                    </svg>
                    <a href="custWorkInfo/@UserInfo.custID/@UserInfo.vehID" class="text-2xl text-gray-100 ">Work Profile</a>
                </p>
            </div>
            <div class="flex items-center justify-center rounded h-48 main-color alpha">
                <p align="center" class="text-2xl text-gray-400 dark:text-gray-500">
                    <svg xmlns="http://www.w3.org/2000/svg" width="100" height="90" fill="white" class="bi bi-device-ssd-fill" viewBox="0 0 16 16">
                        <path d="M5 8V4h6v4z" />
                        <path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm0 1.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0m9 0a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0M3.5 11a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1m9.5-.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0M4.75 3h6.5a.75.75 0 0 1 .75.75v4.5a.75.75 0 0 1-.75.75h-6.5A.75.75 0 0 1 4 8.25v-4.5A.75.75 0 0 1 4.75 3M5 12h6a1 1 0 0 1 1 1v2h-1v-2h-.75v2h-1v-2H8.5v2h-1v-2h-.75v2h-1v-2H5v2H4v-2a1 1 0 0 1 1-1" />
                    </svg>
                    <span class="text-2xl text-gray-100">Status: <span style="color: white; font-weight: bolder; background: green;" class="pl-2 pr-2">ON</span></span>
                </p>
            </div>
            <div class="flex items-center justify-center rounded h-48 main-color alpha">
                <p align="center" class="text-2xl text-gray-400 dark:text-gray-500">
                    <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" fill="white" class="bi bi-shield-lock-fill" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M8 0c-.69 0-1.843.265-2.928.56-1.11.3-2.229.655-2.887.87a1.54 1.54 0 0 0-1.044 1.262c-.596 4.477.787 7.795 2.465 9.99a11.8 11.8 0 0 0 2.517 2.453c.386.273.744.482 1.048.625.28.132.581.24.829.24s.548-.108.829-.24a7 7 0 0 0 1.048-.625 11.8 11.8 0 0 0 2.517-2.453c1.678-2.195 3.061-5.513 2.465-9.99a1.54 1.54 0 0 0-1.044-1.263 63 63 0 0 0-2.887-.87C9.843.266 8.69 0 8 0m0 5a1.5 1.5 0 0 1 .5 2.915l.385 1.99a.5.5 0 0 1-.491.595h-.788a.5.5 0 0 1-.49-.595l.384-1.99A1.5 1.5 0 0 1 8 5" />
                    </svg>
                    <span class="text-2xl text-gray-100">Security:  <span style="color: white; font-weight: bolder; background: red;" class="pl-2 pr-2">ON</span></span>
                </p>
            </div>
        </div>
    </div>


    <script>
        // Retrieve checkbox state from local storage and set it on page load
        window.addEventListener('DOMContentLoaded', function () {
            const checkbox = document.getElementById('toggleCheckbox');
            const isChecked = localStorage.getItem('toggleCheckbox');

            if (isChecked === 'true') {
                checkbox.checked = true;
            } else {
                checkbox.checked = false;
            }
        });

        // Save checkbox state to local storage when toggled
        document.getElementById('toggleCheckbox').addEventListener('change', function () {
            const isChecked = this.checked;
            localStorage.setItem('toggleCheckbox', isChecked);
        });
    </script>
</div>

@code {
    List<CustomersModel> customersList = new List<CustomersModel>();
    List<VehicleModel> vehicleList = new List<VehicleModel>();
    public class userInfo
    {
        public string user { get; set; }
        public string custID { get; set; }
        public string vehID { get; set; }
        public string firstname { get; set; }
    }
    private userInfo UserInfo = new userInfo();
    private string userName;
    protected override async Task OnInitializedAsync()
    {
        // Get the current authentication state
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        // Extract the user's identity from the authentication state
        var user = authenticationState.User;

        // Get the user's name
        userName = user.Identity.Name;
        if (userName == null)
        {

        }
        else
        {
            await LoadData();
            //StateHasChanged();
        }

    }
    private async Task LoadData()
    {
        customersList = await cust.GetCustomerByID(userName);
        // if (customersList != null)
        // {
        //     UserInfo.custID = customersList[0].custID.ToString();
        //     UserInfo.firstname = customersList[0].firstName;
        // }
        vehicleList = await veh.GetVehicleModelByID(userName);
        // if (vehicleList != null)
        // {
        //     UserInfo.vehID = vehicleList[0].vehicleID.ToString();
        // }
        // UserInfo.user = userName;
        // if(customersList!=null && vehicleList != null)
        // {

        // }
    }

    private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        navManager.NavigateTo("/", true);
    }
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
