@page "/loggedin"
@using BitTagModels
@using BitTagUser.Authentication;
@using BitTagUser.CutomerServices
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.JSInterop;
@inject ICustomer cust
@attribute [Authorize(Roles = "Administrator,User")]
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
<PageTitle>Login to your BitTag</PageTitle>


@* <div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.Cnic" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input type="password" @bind="model.Pin" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
        <div class="mb-3 d-grid gap-2">
            <button class="btn btn-primary">
                <a href="/customer">
                    Register
                </a>
            </button>
        </div>
    </div>
</div> *@

<!-- component -->
<div class="min-h-screen flex items-center justify-center w-full bg-gray-950" style="padding-top: 80px; padding-bottom: 80px;">
    <div class=" bg-gray-900 shadow-md rounded-lg px-8 py-6 max-w-md">
        <h1 class="text-2xl font-bold text-center mb-4 text-gray-200">Log in!</h1>
        <form action="#">
            <div class="mb-4">
                <label for="cnic" class="block text-sm font-medium text-gray-100  mb-2">C-NIC</label>
                <input @bind="model.Cnic" type="number" id="cnic" class="shadow-sm rounded-md w-full px-3 py-2 border border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="61101XXXXXXX" required>
            </div>
            <div class="mb-4">
                <label for="password" class="block text-sm font-medium text-gray-100 mb-2">Passcode</label>
                <input type="password" @bind="model.Pin" id="password" class="shadow-sm rounded-md w-full px-3 py-2 border border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" required>
            </div>
            <button @onclick="Authenticate" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Login</button>
        </form>
    </div>
</div> 








@code {
    private class Model
    {
        public string? Cnic { get; set; }
        public int Pin { get; set; }
    }
    private Model model = new Model();
    private bool popup = false;
    private bool showSuccess = false;
    private void showLogin()
    {
        popup = true;
    }

    CustomersModel customers = new CustomersModel();
    List<CustomersModel> customersList = new List<CustomersModel>();
    private async void SaveCustomer()
    {
        Guid id = Guid.NewGuid();
        customers.custID = id;
        await cust.SaveCustomers(customers);
        await LoadData();
        showSuccess = true;
        await Task.Delay(3000);
        showSuccess = false;
        StateHasChanged();
        customers = new CustomersModel();
    }
    private async void DeleteCustomer(Guid id)
    {
        await cust.DeleteCustomer(id);
    }
    private async Task LoadData()
    {
        customersList = await cust.GetCustomers();
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }



    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserName(model.Cnic);
        if (userAccount != null && userAccount.Pin == model.Pin)
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    UserName = userAccount.Cnic,
                    Role = userAccount.Role
                });
            navManager.NavigateTo("/logged", true);
        }
        else
        {
            // Throw an error indicating invalid username/password
            throw new Exception("Invalid Username/Password");
        }
    }


}
